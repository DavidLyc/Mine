package com.whut.mine.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.whut.mine.entity.SafetyCheckTableDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SafetyCheckTableDetail_T".
*/
public class SafetyCheckTableDetailDao extends AbstractDao<SafetyCheckTableDetail, Long> {

    public static final String TABLENAME = "SafetyCheckTableDetail_T";

    /**
     * Properties of entity SafetyCheckTableDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SafetyCheckTableDetailID = new Property(0, Long.class, "safetyCheckTableDetailID", true, "SafetyCheckTableDetailID");
        public final static Property CheckTableID = new Property(1, int.class, "checkTableID", false, "CheckTableID");
        public final static Property CheckTime = new Property(2, String.class, "checkTime", false, "CheckTime");
        public final static Property FirstIndexID = new Property(3, int.class, "firstIndexID", false, "FirstIndexID");
        public final static Property SecondIndexID = new Property(4, int.class, "secondIndexID", false, "SecondIndexID");
        public final static Property SecondIndexName = new Property(5, String.class, "secondIndexName", false, "SecondIndexName");
        public final static Property Result = new Property(6, String.class, "result", false, "Result");
        public final static Property CheckMemo = new Property(7, String.class, "checkMemo", false, "CheckMemo");
        public final static Property HiddenDangerCategory = new Property(8, String.class, "hiddenDangerCategory", false, "HiddenDangerCategory");
        public final static Property Picture = new Property(9, String.class, "picture", false, "Picture");
    }


    public SafetyCheckTableDetailDao(DaoConfig config) {
        super(config);
    }
    
    public SafetyCheckTableDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SafetyCheckTableDetail_T\" (" + //
                "\"SafetyCheckTableDetailID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: safetyCheckTableDetailID
                "\"CheckTableID\" INTEGER NOT NULL ," + // 1: checkTableID
                "\"CheckTime\" TEXT NOT NULL ," + // 2: checkTime
                "\"FirstIndexID\" INTEGER NOT NULL ," + // 3: firstIndexID
                "\"SecondIndexID\" INTEGER NOT NULL ," + // 4: secondIndexID
                "\"SecondIndexName\" TEXT," + // 5: secondIndexName
                "\"Result\" TEXT," + // 6: result
                "\"CheckMemo\" TEXT," + // 7: checkMemo
                "\"HiddenDangerCategory\" TEXT," + // 8: hiddenDangerCategory
                "\"Picture\" TEXT);"); // 9: picture
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SafetyCheckTableDetail_T\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SafetyCheckTableDetail entity) {
        stmt.clearBindings();
 
        Long safetyCheckTableDetailID = entity.getSafetyCheckTableDetailID();
        if (safetyCheckTableDetailID != null) {
            stmt.bindLong(1, safetyCheckTableDetailID);
        }
        stmt.bindLong(2, entity.getCheckTableID());
        stmt.bindString(3, entity.getCheckTime());
        stmt.bindLong(4, entity.getFirstIndexID());
        stmt.bindLong(5, entity.getSecondIndexID());
 
        String secondIndexName = entity.getSecondIndexName();
        if (secondIndexName != null) {
            stmt.bindString(6, secondIndexName);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(7, result);
        }
 
        String checkMemo = entity.getCheckMemo();
        if (checkMemo != null) {
            stmt.bindString(8, checkMemo);
        }
 
        String hiddenDangerCategory = entity.getHiddenDangerCategory();
        if (hiddenDangerCategory != null) {
            stmt.bindString(9, hiddenDangerCategory);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(10, picture);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SafetyCheckTableDetail entity) {
        stmt.clearBindings();
 
        Long safetyCheckTableDetailID = entity.getSafetyCheckTableDetailID();
        if (safetyCheckTableDetailID != null) {
            stmt.bindLong(1, safetyCheckTableDetailID);
        }
        stmt.bindLong(2, entity.getCheckTableID());
        stmt.bindString(3, entity.getCheckTime());
        stmt.bindLong(4, entity.getFirstIndexID());
        stmt.bindLong(5, entity.getSecondIndexID());
 
        String secondIndexName = entity.getSecondIndexName();
        if (secondIndexName != null) {
            stmt.bindString(6, secondIndexName);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(7, result);
        }
 
        String checkMemo = entity.getCheckMemo();
        if (checkMemo != null) {
            stmt.bindString(8, checkMemo);
        }
 
        String hiddenDangerCategory = entity.getHiddenDangerCategory();
        if (hiddenDangerCategory != null) {
            stmt.bindString(9, hiddenDangerCategory);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(10, picture);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SafetyCheckTableDetail readEntity(Cursor cursor, int offset) {
        SafetyCheckTableDetail entity = new SafetyCheckTableDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // safetyCheckTableDetailID
            cursor.getInt(offset + 1), // checkTableID
            cursor.getString(offset + 2), // checkTime
            cursor.getInt(offset + 3), // firstIndexID
            cursor.getInt(offset + 4), // secondIndexID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // secondIndexName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // result
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // checkMemo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // hiddenDangerCategory
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // picture
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SafetyCheckTableDetail entity, int offset) {
        entity.setSafetyCheckTableDetailID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCheckTableID(cursor.getInt(offset + 1));
        entity.setCheckTime(cursor.getString(offset + 2));
        entity.setFirstIndexID(cursor.getInt(offset + 3));
        entity.setSecondIndexID(cursor.getInt(offset + 4));
        entity.setSecondIndexName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setResult(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCheckMemo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHiddenDangerCategory(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPicture(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SafetyCheckTableDetail entity, long rowId) {
        entity.setSafetyCheckTableDetailID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SafetyCheckTableDetail entity) {
        if(entity != null) {
            return entity.getSafetyCheckTableDetailID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SafetyCheckTableDetail entity) {
        return entity.getSafetyCheckTableDetailID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
