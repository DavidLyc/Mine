package com.whut.mine.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.whut.mine.entity.SafetyCheckTableInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SafetyCheckTableInfo_T".
*/
public class SafetyCheckTableInfoDao extends AbstractDao<SafetyCheckTableInfo, Long> {

    public static final String TABLENAME = "SafetyCheckTableInfo_T";

    /**
     * Properties of entity SafetyCheckTableInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CheckTableID = new Property(1, int.class, "checkTableID", false, "CheckTableID");
        public final static Property CheckTime = new Property(2, String.class, "checkTime", false, "CheckTime");
        public final static Property DataTime = new Property(3, String.class, "dataTime", false, "DataTime");
        public final static Property PersonInChargeNum = new Property(4, String.class, "personInChargeNum", false, "PersonInChargeNum");
        public final static Property PersonInChargeName = new Property(5, String.class, "personInChargeName", false, "PersonInChargeName");
        public final static Property PeopleForCheck = new Property(6, String.class, "peopleForCheck", false, "PeopleForCheck");
        public final static Property Suggestion = new Property(7, String.class, "suggestion", false, "Suggestion");
        public final static Property ValidatePic = new Property(8, String.class, "validatePic", false, "ValidatePic");
        public final static Property CheckCatogoryNum = new Property(9, int.class, "checkCatogoryNum", false, "CheckCatogoryNum");
        public final static Property InstitutionChecked = new Property(10, String.class, "institutionChecked", false, "InstitutionChecked");
    }


    public SafetyCheckTableInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SafetyCheckTableInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SafetyCheckTableInfo_T\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CheckTableID\" INTEGER NOT NULL ," + // 1: checkTableID
                "\"CheckTime\" TEXT NOT NULL ," + // 2: checkTime
                "\"DataTime\" TEXT," + // 3: dataTime
                "\"PersonInChargeNum\" TEXT," + // 4: personInChargeNum
                "\"PersonInChargeName\" TEXT," + // 5: personInChargeName
                "\"PeopleForCheck\" TEXT," + // 6: peopleForCheck
                "\"Suggestion\" TEXT," + // 7: suggestion
                "\"ValidatePic\" TEXT," + // 8: validatePic
                "\"CheckCatogoryNum\" INTEGER NOT NULL ," + // 9: checkCatogoryNum
                "\"InstitutionChecked\" TEXT);"); // 10: institutionChecked
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SafetyCheckTableInfo_T\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SafetyCheckTableInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCheckTableID());
        stmt.bindString(3, entity.getCheckTime());
 
        String dataTime = entity.getDataTime();
        if (dataTime != null) {
            stmt.bindString(4, dataTime);
        }
 
        String personInChargeNum = entity.getPersonInChargeNum();
        if (personInChargeNum != null) {
            stmt.bindString(5, personInChargeNum);
        }
 
        String personInChargeName = entity.getPersonInChargeName();
        if (personInChargeName != null) {
            stmt.bindString(6, personInChargeName);
        }
 
        String peopleForCheck = entity.getPeopleForCheck();
        if (peopleForCheck != null) {
            stmt.bindString(7, peopleForCheck);
        }
 
        String suggestion = entity.getSuggestion();
        if (suggestion != null) {
            stmt.bindString(8, suggestion);
        }
 
        String validatePic = entity.getValidatePic();
        if (validatePic != null) {
            stmt.bindString(9, validatePic);
        }
        stmt.bindLong(10, entity.getCheckCatogoryNum());
 
        String institutionChecked = entity.getInstitutionChecked();
        if (institutionChecked != null) {
            stmt.bindString(11, institutionChecked);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SafetyCheckTableInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCheckTableID());
        stmt.bindString(3, entity.getCheckTime());
 
        String dataTime = entity.getDataTime();
        if (dataTime != null) {
            stmt.bindString(4, dataTime);
        }
 
        String personInChargeNum = entity.getPersonInChargeNum();
        if (personInChargeNum != null) {
            stmt.bindString(5, personInChargeNum);
        }
 
        String personInChargeName = entity.getPersonInChargeName();
        if (personInChargeName != null) {
            stmt.bindString(6, personInChargeName);
        }
 
        String peopleForCheck = entity.getPeopleForCheck();
        if (peopleForCheck != null) {
            stmt.bindString(7, peopleForCheck);
        }
 
        String suggestion = entity.getSuggestion();
        if (suggestion != null) {
            stmt.bindString(8, suggestion);
        }
 
        String validatePic = entity.getValidatePic();
        if (validatePic != null) {
            stmt.bindString(9, validatePic);
        }
        stmt.bindLong(10, entity.getCheckCatogoryNum());
 
        String institutionChecked = entity.getInstitutionChecked();
        if (institutionChecked != null) {
            stmt.bindString(11, institutionChecked);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SafetyCheckTableInfo readEntity(Cursor cursor, int offset) {
        SafetyCheckTableInfo entity = new SafetyCheckTableInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // checkTableID
            cursor.getString(offset + 2), // checkTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dataTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // personInChargeNum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // personInChargeName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // peopleForCheck
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // suggestion
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // validatePic
            cursor.getInt(offset + 9), // checkCatogoryNum
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // institutionChecked
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SafetyCheckTableInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCheckTableID(cursor.getInt(offset + 1));
        entity.setCheckTime(cursor.getString(offset + 2));
        entity.setDataTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPersonInChargeNum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPersonInChargeName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPeopleForCheck(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSuggestion(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setValidatePic(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCheckCatogoryNum(cursor.getInt(offset + 9));
        entity.setInstitutionChecked(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SafetyCheckTableInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SafetyCheckTableInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SafetyCheckTableInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
