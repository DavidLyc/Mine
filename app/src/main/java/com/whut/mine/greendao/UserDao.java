package com.whut.mine.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.whut.mine.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "userinfo_t".
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "userinfo_t";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property EmployeeNum = new Property(0, String.class, "employeeNum", true, "EmployeeNum");
        public final static Property EmployeeName = new Property(1, String.class, "employeeName", false, "EmployeeName");
        public final static Property InstitutionNum = new Property(2, String.class, "institutionNum", false, "InstitutionNum");
        public final static Property Password = new Property(3, String.class, "password", false, "Password");
        public final static Property UserRight = new Property(4, String.class, "userRight", false, "UserRight");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"userinfo_t\" (" + //
                "\"EmployeeNum\" TEXT PRIMARY KEY NOT NULL ," + // 0: employeeNum
                "\"EmployeeName\" TEXT," + // 1: employeeName
                "\"InstitutionNum\" TEXT," + // 2: institutionNum
                "\"Password\" TEXT," + // 3: password
                "\"UserRight\" TEXT);"); // 4: userRight
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"userinfo_t\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getEmployeeNum());
 
        String employeeName = entity.getEmployeeName();
        if (employeeName != null) {
            stmt.bindString(2, employeeName);
        }
 
        String institutionNum = entity.getInstitutionNum();
        if (institutionNum != null) {
            stmt.bindString(3, institutionNum);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String userRight = entity.getUserRight();
        if (userRight != null) {
            stmt.bindString(5, userRight);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getEmployeeNum());
 
        String employeeName = entity.getEmployeeName();
        if (employeeName != null) {
            stmt.bindString(2, employeeName);
        }
 
        String institutionNum = entity.getInstitutionNum();
        if (institutionNum != null) {
            stmt.bindString(3, institutionNum);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String userRight = entity.getUserRight();
        if (userRight != null) {
            stmt.bindString(5, userRight);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getString(offset + 0), // employeeNum
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // employeeName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // institutionNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // userRight
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setEmployeeNum(cursor.getString(offset + 0));
        entity.setEmployeeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInstitutionNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserRight(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getEmployeeNum();
    }
    
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getEmployeeNum();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
