package com.whut.mine.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.whut.mine.entity.SafetyCheckTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SafetyCheckTable_T".
*/
public class SafetyCheckTableDao extends AbstractDao<SafetyCheckTable, Long> {

    public static final String TABLENAME = "SafetyCheckTable_T";

    /**
     * Properties of entity SafetyCheckTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CheckTableID = new Property(0, Long.class, "checkTableID", true, "CheckTableID");
        public final static Property CheckTableNum = new Property(1, String.class, "checkTableNum", false, "CheckTableNum");
        public final static Property CheckTableName = new Property(2, String.class, "checkTableName", false, "CheckTableName");
        public final static Property Category = new Property(3, String.class, "category", false, "Category");
        public final static Property InstitutionNum = new Property(4, String.class, "institutionNum", false, "InstitutionNum");
        public final static Property Deleted = new Property(5, String.class, "deleted", false, "Deleted");
        public final static Property AddTime = new Property(6, String.class, "addTime", false, "AddTime");
        public final static Property DeleteTime = new Property(7, String.class, "deleteTime", false, "DeleteTime");
        public final static Property VisibleToWho = new Property(8, String.class, "visibleToWho", false, "VisibleToWho");
    }


    public SafetyCheckTableDao(DaoConfig config) {
        super(config);
    }
    
    public SafetyCheckTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SafetyCheckTable_T\" (" + //
                "\"CheckTableID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: checkTableID
                "\"CheckTableNum\" TEXT," + // 1: checkTableNum
                "\"CheckTableName\" TEXT," + // 2: checkTableName
                "\"Category\" TEXT," + // 3: category
                "\"InstitutionNum\" TEXT," + // 4: institutionNum
                "\"Deleted\" TEXT," + // 5: deleted
                "\"AddTime\" TEXT," + // 6: addTime
                "\"DeleteTime\" TEXT," + // 7: deleteTime
                "\"VisibleToWho\" TEXT);"); // 8: visibleToWho
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SafetyCheckTable_T\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SafetyCheckTable entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCheckTableID());
 
        String checkTableNum = entity.getCheckTableNum();
        if (checkTableNum != null) {
            stmt.bindString(2, checkTableNum);
        }
 
        String checkTableName = entity.getCheckTableName();
        if (checkTableName != null) {
            stmt.bindString(3, checkTableName);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(4, category);
        }
 
        String institutionNum = entity.getInstitutionNum();
        if (institutionNum != null) {
            stmt.bindString(5, institutionNum);
        }
 
        String deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindString(6, deleted);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(7, addTime);
        }
 
        String deleteTime = entity.getDeleteTime();
        if (deleteTime != null) {
            stmt.bindString(8, deleteTime);
        }
 
        String visibleToWho = entity.getVisibleToWho();
        if (visibleToWho != null) {
            stmt.bindString(9, visibleToWho);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SafetyCheckTable entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCheckTableID());
 
        String checkTableNum = entity.getCheckTableNum();
        if (checkTableNum != null) {
            stmt.bindString(2, checkTableNum);
        }
 
        String checkTableName = entity.getCheckTableName();
        if (checkTableName != null) {
            stmt.bindString(3, checkTableName);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(4, category);
        }
 
        String institutionNum = entity.getInstitutionNum();
        if (institutionNum != null) {
            stmt.bindString(5, institutionNum);
        }
 
        String deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindString(6, deleted);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(7, addTime);
        }
 
        String deleteTime = entity.getDeleteTime();
        if (deleteTime != null) {
            stmt.bindString(8, deleteTime);
        }
 
        String visibleToWho = entity.getVisibleToWho();
        if (visibleToWho != null) {
            stmt.bindString(9, visibleToWho);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public SafetyCheckTable readEntity(Cursor cursor, int offset) {
        SafetyCheckTable entity = new SafetyCheckTable( //
            cursor.getLong(offset + 0), // checkTableID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // checkTableNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // checkTableName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // category
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // institutionNum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deleted
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // addTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // deleteTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // visibleToWho
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SafetyCheckTable entity, int offset) {
        entity.setCheckTableID(cursor.getLong(offset + 0));
        entity.setCheckTableNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCheckTableName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInstitutionNum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeleted(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDeleteTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVisibleToWho(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SafetyCheckTable entity, long rowId) {
        entity.setCheckTableID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SafetyCheckTable entity) {
        if(entity != null) {
            return entity.getCheckTableID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SafetyCheckTable entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
